

============================================================
소스.cpp, 저장시간: 05/04/23 Thursday 16:48:33 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(10주 1일)
//--------------------------------------------------------------------
// 반복자 category - input / output / forward / bidirectional / random_access(전통적인 분류)
//					contiguous( C++20 에서 추가된 )
//--------------------------------------------------------------------
#include <iostream>
#include <forward_list>
#include <list>
#include <vector>
#include <deque>
#include <algorithm>

#include "String.h"
#include "save.h"

using namespace std;
extern bool 관찰;

표준 iterator가 되려면
1. 너는 어떤 종류니?
2. 너가 가르키는 원소의 타입은?
3. 너를 포인터로 바꾸면 어떤 타입이니?
4. 너를 래퍼런스로 바꾸면 어떤 타입이니?
5. 너와 다른 반복자간의 거리를 어떤 타입으로 표현하니?
에 대한 질문에 답을 해줄 수 있어야한다.

template <class iter>
void algo(iter it) {
	cout << typeid(iter::iterator_category).name() << endl;
	cout << typeid(iter::iterator_concept).name() << endl;
	cout << endl;
}

//-----------
int main()
//-----------
{
	int a[10]{ 1,3,5,7,9,2,4,6,8,10 };
	sort(&a[0], &a[10]);
	algo(vector<char>{}.cbegin());
	
	// int*::iterator_category 가 있겠냐고 ㅋㅋ
	int* p;
	//algo(p);
	save("소스.cpp");
}