============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 17:55:31 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

//[문제] 의도대로 실행되도록 코딩하라. main()안의 내용은 변경 금지
template <typename T>
void change(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}

#include <iostream>
#include "save.h"
using namespace std;

//-----------
int main()
//-----------
{
	int a{ 1 }, b{ 2 };
	change(a, b);
	cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함

	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 17:57:21 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

////[문제] 의도대로 실행되도록 코딩하라. main()안의 내용은 변경 금지
//template <typename T>
//void change(T& a, T& b) {
//	T temp = a;
//	a = b;
//	b = temp;
//}

#include <iostream>
#include "save.h"
using namespace std;

void change(int&, int&);

//-----------
int main()
//-----------
{
	int a{ 1 }, b{ 2 };
	change(a, b);
	cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함

	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

void change(int& a, int& b) {
	int temp = a;
	a = b;
	b = temp;
}


============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 18:20:56 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

template <typename T>
void change(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}

class Dog {
public:
	int a;
	Dog(int a) {
		this->a = a;
	}
};

ostream& operator<<(ostream& outputStream, const Dog& d) {
	cout << d.a;
	return outputStream;
}


//-----------
int main()
//-----------
{
	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}


	save("소스.cpp");
}


============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 18:27:32 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

template <typename T>
void change(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}

class Dog {
public:
	int a;
	Dog(int a) {
		this->a = a;
	}
	friend ostream& operator<<(ostream& os, const Dog& d) {
		return os << d.a;
	}
};




//-----------
int main()
//-----------
{
	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}


	save("소스.cpp");
}


============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 18:38:52 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

template <class T>
void change(T&, T&);

class Dog {
public:
	int a;
	Dog(int a) {
		this->a = a;
	}
	friend ostream& operator<<(ostream& os, const Dog& d) {
		return os << d.a;
	}
};

//-----------
int main()
//-----------
{
	{
		Dog a{ 1 }, b{ 2 };		// Dog의 복사 생성자가 호출됨
								// a.operator=(b) special한 복사생성자
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}


	save("소스.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 18:44:06 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

template <class T>
void change(T&, T&);

class Dog {
public:
	int a;
	Dog(int a) {
		this->a = a;
	}
	friend ostream& operator<<(ostream& os, const Dog& d) {
		return os << d.a;
	}
};

//-----------
int main()
//-----------
{
	{
		Dog a{ 1 }, b{ 2 };		// Dog의 복사 생성자가 호출됨
								// a.operator=(b) special한 복사생성자

		change(a, b);			// 1. change(Dog, Dog)가 있는지 판단
								// 2. change(Dog&, Dog&)
								// 3. 둘 다 없으면 템플릿으로 코드를 찍어냄
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}


	save("소스.cpp");
}

template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

============================================================
소스.cpp, 저장시간: 03/07/23 Tuesday 18:49:41 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(1주 2일)
//--------------------------------------------------------------------
// c++ template 복습
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"
using namespace std;

// 템플릿을 사용하기 위해선 컴파일러가 이 소스코드를 언제나 알고있어야한다.
// ★☆★☆★☆★☆★따라서 선언과 정의를 동시에 해둔다☆★☆★☆★☆★☆
template <class T>
void change(T& a, T& b) {
	T temp{ a };
	a = b;
	b = temp;
}

class Dog {
public:
	int a;
	Dog(int a) {
		this->a = a;
	}
	friend ostream& operator<<(ostream& os, const Dog& d) {
		return os << d.a;
	}
};

//-----------
int main()
//-----------
{
	{
		Dog a{ 1 }, b{ 2 };		// Dog의 복사 생성자가 호출됨
								// a.operator=(b) special한 복사생성자

		change(a, b);			// 1. change(Dog, Dog)가 있는지 판단
								// 2. change(Dog&, Dog&)
								// 3. 둘 다 없으면 템플릿으로 코드를 찍어냄
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}

	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';		// 2, 1이 출력 되야함
	}


	save("소스.cpp");
}

C++ P(rogram) L(anguage)
c++의 Paradigm은
1. Procedual PL (절차를 기술하기 위한 언어, c)
2. Object Oriented PL (객체지향 언어, c++)
	- class 속성, 행동을 하나로 묶어 하나의 객체에 집중하여 표현 가능, 인터페이스 출력, 다른 class와 상호작용, 상속, UML   
	- 특정 object를 위해 코딩하겠다 OP
3. Generic PL (자료형과는 무관한 언어) ★
	- 2번과 반대되는 내용이지만 어울릴 수 있다.
	- 자료형과 무관한 함수(알고리즘), class(자료구조)
4. Template Meta PL (프로그램을 생성하는 프로그램)
	 - 3번과 더불어 c++에 독보적인 시스템
5. Funtional PL (c++에 대단한 실력이 있으면 해봐)
