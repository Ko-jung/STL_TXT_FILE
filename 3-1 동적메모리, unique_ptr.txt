

============================================================
소스.cpp, 저장시간: 03/16/23 Thursday 17:17:26 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(3주 1일)
// -------------------------------------------------------------------
// cmd창 맨위 우클릭->속성->레이아웃->창 크기 너비 80
//--------------------------------------------------------------------
// STACK에서 사용할 수 있는 수보다 더 많은 수의 자료형 다루기 - DATA, FREESTORE
//--------------------------------------------------------------------

#include <iostream>
#include <format>
#include <numeric>
#include <thread>

#include "save.h"

using namespace std;


// [문제] 사용자가 원하는 만큼 int를 생성하라.
// int의 값을 1부터 시작하는 정수로 채워라.
// int의 합계를 화면에 출력하라.
// 이 과정을 영원히 반복하라

//-----------
int main()
//-----------
{		
	int i{};
	//while(true) {
		int num{ 250'000'000 };
		int* p;
		//unique_ptr<int[]> p{ new int[num] };		// 1GB 요청, RAII
													// array와 비슷하게 포인터와 크기는 같으면서 기능은 더 많음
													// RAII 특성 때문에 소멸이 자동으로 이루어진다. 이 경우엔 지역 단위.
		try {										// 매번 검사를 해야하므로 속도가 느려져 c++(게임)에선 쓰지않는다.
			p = new int[ num ];					// 1GB 요청, (raw pointer)
													// ☆★☆★☆★☆★☆c++에서 사용하지 말라고 권고하는 대표 주자 ([], *)☆★☆★☆★☆★☆


		}
		catch (const std::exception& e) {
			cout << "메모리 고갈 - " << e.what() << endl;
		}


		// 진짜 쓰지않으면 할당은 되나 메모리는 사용하지 않음
		iota(p, p + num, 1);
		long long sum{};
		for (int i = 0; i < num; i++) {
			sum += p[i];
		}
		cout << sum << endl;

		cout << ++i << "번째 할당 성공." << endl;

		//delete[] p;
	//}


	save("소스.cpp");
}

============================================================
소스.cpp, 저장시간: 03/16/23 Thursday 17:18:45 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(3주 1일)
// -------------------------------------------------------------------
// cmd창 맨위 우클릭->속성->레이아웃->창 크기 너비 80
//--------------------------------------------------------------------
// STACK에서 사용할 수 있는 수보다 더 많은 수의 자료형 다루기 - DATA, FREESTORE
//--------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

// [문제] 사용자가 원하는 만큼 int를 생성하라.
// int의 값을 1부터 시작하는 정수로 채워라.
// int의 합계를 화면에 출력하라.
// 이 과정을 영원히 반복하라

//-----------
int main()
//-----------
{
	unique_ptr<Dog[]> p{ new Dog[3] };

	save("소스.cpp");
}