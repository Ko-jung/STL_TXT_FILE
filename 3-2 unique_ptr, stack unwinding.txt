

============================================================
소스.cpp, 저장시간: 03/21/23 Tuesday 17:35:07 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(3주 2일)
// -------------------------------------------------------------------
// cmd창 맨위 우클릭->속성->레이아웃->창 크기 너비 80
//--------------------------------------------------------------------
// STACK에서 사용할 수 있는 수보다 더 많은 수의 자료형 다루기 - DATA, FREESTORE
//--------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

// [문제] 사용자가 원하는 만큼 int를 생성하라.
// int의 값을 1부터 시작하는 정수로 채워라.
// int의 합계를 화면에 출력하라.
// 이 과정을 영원히 반복하라

//-----------
int main()
//-----------
{
	// 앞으로 C++을 사용한다면 []과 *은 사용하지 말자
	unique_ptr<Dog[]> p{ new Dog[3] };

	save("소스.cpp");
}

========================================================================================================================
//===============================================멍청한 포인터 사용 예제==================================================
========================================================================================================================


============================================================
소스.cpp, 저장시간: 03/21/23 Tuesday 17:42:22 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(3주 2일)
// -------------------------------------------------------------------
// cmd창 맨위 우클릭->속성->레이아웃->창 크기 너비 80
//--------------------------------------------------------------------
// STACK에서 사용할 수 있는 수보다 더 많은 수의 자료형 다루기 - DATA, FREESTORE
//--------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

void 함수() {
	// 자원을 확보하고 해제
	Dog* p = new Dog;

	// 이 사이에는 많은 시간과 공간이 있다고 가정

	// 문제는 어딘가에서 예외가 발생한 경우
	throw 123;


	delete p;
}

//-----------
int main()
//-----------
{
	try {
		함수();				// 예외를 던지는 함수
	}
	catch ( int n /*... <- 아무거나 다 받게*/ ){
		cout << "에외를 받았다" << endl;
	}
	
	save("소스.cpp");
}

========================================================================================================================
//========================================똑똑한 포인터 사용 예제(소멸이 출력된것을 볼 수 있다)===============================
========================================================================================================================



============================================================
소스.cpp, 저장시간: 03/21/23 Tuesday 17:45:42 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(3주 2일)
// -------------------------------------------------------------------
// cmd창 맨위 우클릭->속성->레이아웃->창 크기 너비 80
//--------------------------------------------------------------------
// STACK에서 사용할 수 있는 수보다 더 많은 수의 자료형 다루기 - DATA, FREESTORE
//--------------------------------------------------------------------

#include <iostream>
#include <memory>

#include "save.h"

using namespace std;

class Dog {
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

void 함수() {
	// 자원을 확보하고 해제
	unique_ptr<Dog> p{ new Dog };		// RAII

	// 이 사이에는 많은 시간과 공간이 있다고 가정
	// 문제는 어딘가에서 예외가 발생한 경우
	
	// 이때 STACK unwinding 을 보장한다. unique_ptr, FILE이 대표적
	throw 123;

	cout << "이 문장이 출력되면 본체 버려야" << endl;

}

//-----------
int main()
//-----------
{
	try {
		함수();				// 예외를 던지는 함수
	}
	catch ( int n /*... <- 아무거나 다 받게*/ ){
		cout << "에외를 받았다" << endl;
	}
	
	save("소스.cpp");
}