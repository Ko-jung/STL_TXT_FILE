

============================================================
소스.cpp, 저장시간: 03/23/23 Thursday 16:10:43 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(4주 1일)
//--------------------------------------------------------------------
// 정렬(sort) - callavle type
//--------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

//-----------
int main()
//-----------
{
	array<int, 10> a{ 1,3,5,7,9,2,4,6,8,10 };

	// 난 함수를 여기서 한 번만 쓸건데 굳이 함수를 만들어야하나? -> 람다함수 사용, 가독성 증가, 유지보수 증가
	sort(a.begin(), a.end(), [](int a, int b) {
			return a > b;
		});

	for (int n : a) {
		cout << n << " ";
	}
	cout << endl;

	save("소스.cpp");
}

============================================================
소스.cpp, 저장시간: 03/23/23 Thursday 16:15:52 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(4주 1일)
//--------------------------------------------------------------------
// 정렬(sort) - callavle type
//--------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

//-----------
int main()
//-----------
{
	// sizeof, addressof, typeid
	int n;
	cout << typeid(n).name() << endl;

	// 람다는 뭐일까?
	cout << typeid([]() {
		cout << "Hello!" << endl;
		}).name() << endl;

	save("소스.cpp");
}

============================================================
소스.cpp, 저장시간: 03/23/23 Thursday 16:21:35 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(4주 1일)
//--------------------------------------------------------------------
// 정렬(sort) - callavle type
//--------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

class Cat{};
auto p = []() {
	cout << "Hello!" << endl;
};
//-----------
int main()
//-----------
{
	class Dog {};
	
	cout << "지역변수 Dog의 타입아이디: "<< typeid(Dog()).name() << endl;
	cout << "전역변수 Cat의 타입아이디: "<< typeid(Cat()).name() << endl;

	cout << "지역 람다 함수 타입아이디: " << typeid(p).name() << endl;
	cout << "전역 람다 함수 타입아이디: " << typeid([]() {}).name() << endl;



	save("소스.cpp");
}

============================================================
소스.cpp, 저장시간: 03/23/23 Thursday 16:36:10 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(4주 1일)
//--------------------------------------------------------------------
// 정렬(sort) - callavle type
//--------------------------------------------------------------------

#include <iostream>
#include <array>
#include <algorithm>

#include "save.h"

using namespace std;

class Cat{};
auto p = []() {
	cout << "Hello!" << endl;
};
// 위 람다함수는 아래로 변함 == 함수처럼 불리는 class, function overloading?
// class p {
// public:
// 	void operator()() {
// 		cout << "Hello!" << endl;
// 	 }
// };

//-----------
int main()
//-----------
{
	class Dog {};
	
	cout << "지역변수 Dog의 타입아이디: "<< typeid(Dog()).name() << endl;
	cout << "전역변수 Cat의 타입아이디: "<< typeid(Cat()).name() << endl;

	cout << "지역 람다 함수 타입아이디: " << typeid(p).name() << endl;
	cout << "전역 람다 함수 타입아이디: " << typeid([]() {}).name() << endl;



	save("소스.cpp");
}