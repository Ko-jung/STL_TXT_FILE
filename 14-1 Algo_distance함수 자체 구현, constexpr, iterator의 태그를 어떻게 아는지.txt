

============================================================
소스.cpp, 저장시간: 06/01/23 Thursday 17:16:39 
============================================================
//--------------------------------------------------------------------
// 2023년 1학기 STL 3월 2일 목78		화910 목78		(14주 1일)
//--------------------------------------------------------------------
// Distance 함수 구현 - 컴파일러가 소스코드 확장하며 문제 발생
// 1. C++17 이전 -> tag dispatching - 함수로 우회 (vector용 함수, list용 함수 ...)
// 2. C++17 이후 -> constexpr if 로 선택적 소스코드 확장하는 방식
// 3. 현재 -> concept 키워드를 사용하여 해결
// concept -> range -> constrained algorithm
//--------------------------------------------------------------------

#include <iostream>
#include <set>
#include <vector>
#include <list>

#include <numeric>

#include "String.h"
#include "save.h"

using namespace std;
extern bool 관찰;

template<class iter>
int my_distance(iter b, iter e) {
	// 도대체 전달된 타입은 뭐니? - type_traits


	// constexpr -> 어떤 표현식이 컴파일할때 값을 결정할 수 있음을 의미.
	// 예를 들어 밑 if의 조건문은 컴파일 타임때 돌아갈 수 있는지 판단을 하는데 못 굴리는거면 if문 자체를 통째로 삭제함
	
	// 만약 Iterator가 random_access_iterator 라면
	//if (typeid(typename iterator_traits<iter>::iterator_category) == typeid(random_access_iterator_tag))
	if constexpr (is_same_v<typename iterator_traits<iter>::iterator_category, random_access_iterator_tag>) {
		cout << "Random_access_iterator" << endl;
		return e - b;
	}

	// 아니라면,
	int step{};
	while (b != e) {
		++step;
		++b;
	}
	return step;
}

//-----------
int main()
//-----------
{
	list<int> v(10);
	std::cout << my_distance(v.end(), v.begin()) << std::endl;

	save("소스.cpp");
	//save("String.h");
	//save("String.cpp");
}